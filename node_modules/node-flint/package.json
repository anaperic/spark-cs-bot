{
  "name": "node-flint",
  "version": "4.1.1",
  "description": "Making Bots Spark",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nmarus/flint.git"
  },
  "keywords": [
    "cisco",
    "spark",
    "bot"
  ],
  "bugs": {
    "url": "https://github.com/nmarus/flint/issues"
  },
  "homepage": "https://github.com/nmarus/flint#readme",
  "author": {
    "name": "Nicholas Marus",
    "email": "nmarus@gmail.com"
  },
  "license": "LGPL-3.0",
  "dependencies": {
    "debug": "2.2.0",
    "lodash": "4.11.1",
    "mime-types": "^2.1.11",
    "moment": "2.13.0",
    "node-sparky": "^3.1.17",
    "uuid": "2.0.2",
    "when": "3.7.7"
  },
  "devDependencies": {
    "jsdoc-to-markdown": "^1.3.6"
  },
  "readme": "# node-flint\n\n[![NPM](https://nodei.co/npm/node-flint.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/node-flint/)\n\nCisco Spark Bot SDK for Node JS (Version 4)\n\n***If you are coming from using node-flint version 3.x or earlier, note that the\narchitecture, commands, and some variable names have changed. While this release\nis similar to previous versions, there are some major differences. Please read\nthe API docs below before migrating your code to this release. If you are\nlooking for the old release version, node-flint@3.0.7 is still available to be\ninstalled through NPM.***\n\nBe sure to check out the [wiki](https://github.com/nmarus/flint/wiki) for troubleshooting and examples!\n## Example #1 Using Express\n```js\nvar Flint = require('node-flint');\nvar webhook = require('node-flint/webhook');\nvar express = require('express');\nvar bodyParser = require('body-parser');\nvar app = express();\napp.use(bodyParser.json());\n\n// flint options\nvar config = {\n  webhookUrl: 'http://myserver.com/flint',\n  token: 'Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u',\n  port: 80\n};\n\n// init flint\nvar flint = new Flint(config);\nflint.start();\n\n// say hello\nflint.hears('/hello', function(bot, trigger) {\n  bot.say('Hello %s!', trigger.personDisplayName);\n});\n\n// define express path for incoming webhooks\napp.post('/flint', webhook(flint));\n\n// start express server\nvar server = app.listen(config.port, function () {\n  flint.debug('Flint listening on port %s', config.port);\n});\n\n// gracefully shutdown (ctrl-c)\nprocess.on('SIGINT', function() {\n  flint.debug('stoppping...');\n  server.close();\n  flint.stop().then(function() {\n    process.exit();\n  });\n});\n```\n## Example #2 Using Restify\n```js\nvar Flint = require('node-flint');\nvar webhook = require('node-flint/webhook');\nvar Restify = require('restify');\nvar server = Restify.createServer();\nserver.use(Restify.bodyParser());\n\n// flint options\nvar config = {\n  webhookUrl: 'http://myserver.com/flint',\n  token: 'Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u',\n  port: 80\n};\n\n// init flint\nvar flint = new Flint(config);\nflint.start();\n\n// say hello\nflint.hears('/hello', function(bot, trigger) {\n  bot.say('Hello %s!', trigger.personDisplayName);\n});\n\n// define restify path for incoming webhooks\nserver.post('/flint', webhook(flint));\n\n// start restify server\nserver.listen(config.port, function () {\n  flint.debug('Flint listening on port %s', config.port);\n});\n\n// gracefully shutdown (ctrl-c)\nprocess.on('SIGINT', function() {\n  flint.debug('stoppping...');\n  server.close();\n  flint.stop().then(function() {\n    process.exit();\n  });\n});\n```\n## Features\n\n* Utilizes [node-sparky](https://github.com/nmarus/sparky). As such,\n  includes the following node-sparky features:\n  * Built in rate limiter and outbound queue that allows control over the number\n    of parallel API calls and the minimum time between each call.\n  * Transparently handles some (429, 500, 502) errors and re-queues the request.\n  * File processor for retrieving attachments from room\n  * Event emitters tied to request, response, error, retry, and queue drops.\n  * Returns promises that comply with A+ standards..\n  * Handles pagination transparently. (Receive unlimited records)\n  * **(new)** Support for Spark API Advanced Webhooks\n  * **(new)** Support Teams API\n  * **(new)** Support for markdown formatted messages\n  * **(new)** Support for [authenticated HMAC-SHA1 webhooks](https://developer.ciscospark.com/webhooks-explained.html#sensitive-data)\n* Flint can now be easily embedded into existing Express, Restify, or other\n  Connect based apps.\n* Flint can be used for building standalone bot \"scripts\", but also web applications\n  that interact with Spark API.\n\n## Overview\n\nMost of Flint's functionality is based around the flint.hears function. This\ndefines the phrase or pattern the bot is listening for and what actions to take\nwhen that phrase or pattern is matched. The flint.hears function gets a callback\nthan includes two objects. The bot object, and the trigger object.\n\nFlint generates a bot object instance of the Bot class for each room the Spark\naccount Flint is running under. The bot object instance tracks the specifics\nabout the room it is running in and is passed to the  \"hears\" command callback\nwhen a phrase is heard.\n\nFlint also generates a trigger object based on the person and room that the\nflint.hears function was triggered.\n\nA simple example of a flint.hears() function setup:\n\n```js\nflint.hears(phrase, function(bot, trigger) {\n  bot.<command>\n    .then(function(returnedValue) {\n      // do something with returned value\n    })\n    .catch(function(err) {\n      // handle errors\n    });\n});\n```\n\n* `phrase` : This can be either a string or a regex pattern.\nIf a string, the string is matched against the first word in the room message.\nmessage.\nIf a regex pattern is used, it is matched against the entire message text.\n* `bot` : The bot object that is used to execute commands when the `phrase` is\ntriggered.\n* `bot.<command>` : The Bot method to execute.\n* `then` : Node JS Promise keyword that invokes additional logic once the\nprevious command is executed.\n* `catch` : handle errors that happen at either the original command or in any\nof the chained 'then' functions.\n* `trigger` : The object that describes the details around what triggered the\n`phrase`.\n* `commands` : The commands that are ran when the `phrase` is heard.\n\n### Node JS Promises\nFlint version 4 makes use Node JS promises verses using callbacks as was the\ncase in previous versions. It is not necessary to process the promise returned\nfrom the Flint command in most cases, but this can also be used for creating\nchains of logic that proceed based on the success of the previous command. It\nalso allows a single error handler for the entire chain.\n\nAll promises returned by Flint functions comply with\n[A+ standards](https://promisesaplus.com/).\n\nA simple example of using promises vs using callbacks. More complicated logic\ncan lead to waht is termed [callback hell](callback hell) and heavy use of the\nasync library without careful planning. Promises make this less  of a challenge.\n\n```js\n// callback version Flint 3.x\nflint.hears('/add', function(bot, trigger) {\n  var email = trigger.args[0];\n\n  bot.add(email, function(err, membership) {\n    if(err) {\n      console.log(err);\n    } else {\n      bot.say('Flint was not able to add %s to this room', email, function(err) {\n        if(err) {\n         console.log(err);\n        }\n      });\n    }\n  })\n});\n\n\n// Promise Example with arrow functions in version Flint 4.x\nflint.hears('/add', (bot, trigger) => {\n  var email = trigger.args[1];\n\n  bot.add(email)\n    .then(membership => membership.personEmail)\n    .then(email => {\n      return bot.say('Flint has added %s to this room %s', email, trigger.displayName);\n    })\n    .catch(function(err) {\n      console.log(err);\n    });\n});\n```\n\n#### Authentication\nThe token used to authenticate Flint to the Spark API is passed as part of the\noptions used when instantiating the Flint class. To change or update the\ntoken, use the Flint#setSparkToken() method.\n\n###### Example:\n\n```js\nvar newToken = 'Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u';\n\nflint.setSparkToken(newToken)\n  .then(function(token) {\n    console.log('token updated to: ' + token);\n  };\n```\n## Installation\n\n##### Via Git\n```bash\nmkdir myproj\ncd myproj\ngit clone https://github.com/nmarus/flint\nnpm install ./flint\n```\n\n##### Via NPM:\n```bash\nmkdir myproj\ncd myproj\nnpm install node-flint\n```\n## Classes\n\n<dl>\n<dt><a href=\"#Flint\">Flint</a></dt>\n<dd></dd>\n<dt><a href=\"#Bot\">Bot</a></dt>\n<dd></dd>\n</dl>\n\n## Objects\n\n<dl>\n<dt><a href=\"#Message\">Message</a> : <code>object</code></dt>\n<dd><p>Message Object</p>\n</dd>\n<dt><a href=\"#File\">File</a> : <code>object</code></dt>\n<dd><p>File Object</p>\n</dd>\n<dt><a href=\"#Trigger\">Trigger</a> : <code>object</code></dt>\n<dd><p>Trigger Object</p>\n</dd>\n</dl>\n\n## Events\n\n<dl>\n<dt><a href=\"#event_log\">\"log\"</a></dt>\n<dd><p>Flint log event.</p>\n</dd>\n<dt><a href=\"#event_stop\">\"stop\"</a></dt>\n<dd><p>Flint stop event.</p>\n</dd>\n<dt><a href=\"#event_start\">\"start\"</a></dt>\n<dd><p>Flint start event.</p>\n</dd>\n<dt><a href=\"#event_initialized\">\"initialized\"</a></dt>\n<dd><p>Flint initialized event.</p>\n</dd>\n<dt><a href=\"#event_roomLocked\">\"roomLocked\"</a></dt>\n<dd><p>Room Locked event.</p>\n</dd>\n<dt><a href=\"#event_roomUnocked\">\"roomUnocked\"</a></dt>\n<dd><p>Room Unocked event.</p>\n</dd>\n<dt><a href=\"#event_personEnters\">\"personEnters\"</a></dt>\n<dd><p>Person Enter Room event.</p>\n</dd>\n<dt><a href=\"#event_botAddedAsModerator\">\"botAddedAsModerator\"</a></dt>\n<dd><p>Bot Added as Room Moderator.</p>\n</dd>\n<dt><a href=\"#event_botRemovedAsModerator\">\"botRemovedAsModerator\"</a></dt>\n<dd><p>Bot Removed as Room Moderator.</p>\n</dd>\n<dt><a href=\"#event_personAddedAsModerator\">\"personAddedAsModerator\"</a></dt>\n<dd><p>Person Added as Moderator.</p>\n</dd>\n<dt><a href=\"#event_personRemovedAsModerator\">\"personRemovedAsModerator\"</a></dt>\n<dd><p>Person Removed as Moderator.</p>\n</dd>\n<dt><a href=\"#event_personExits\">\"personExits\"</a></dt>\n<dd><p>Person Exits Room.</p>\n</dd>\n<dt><a href=\"#event_mentioned\">\"mentioned\"</a></dt>\n<dd><p>Bot Mentioned.</p>\n</dd>\n<dt><a href=\"#event_message\">\"message\"</a></dt>\n<dd><p>Message Recieved.</p>\n</dd>\n<dt><a href=\"#event_files\">\"files\"</a></dt>\n<dd><p>File Recieved.</p>\n</dd>\n<dt><a href=\"#event_spawn\">\"spawn\"</a></dt>\n<dd><p>Bot Spawned.</p>\n</dd>\n<dt><a href=\"#event_despawn\">\"despawn\"</a></dt>\n<dd><p>Bot Despawned.</p>\n</dd>\n</dl>\n\n<a name=\"Flint\"></a>\n\n## Flint\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | Flint UUID |\n| active | <code>boolean</code> | Flint active state |\n| intialized | <code>boolean</code> | Flint fully initialized |\n| machine | <code>boolean</code> | Is Flint attached to Spark using a machine account? |\n| person | <code>object</code> | Flint person object |\n| email | <code>string</code> | Flint email |\n| spark | <code>object</code> | The Spark instance used by flint |\n\n\n* [Flint](#Flint)\n    * [new Flint(options)](#new_Flint_new)\n    * [.options](#Flint+options) : <code>object</code>\n    * [.setSparkToken(token)](#Flint+setSparkToken) ⇒ <code>Promise.&lt;String&gt;</code>\n    * [.stop()](#Flint+stop) ⇒ <code>Promise.&lt;Boolean&gt;</code>\n    * [.start()](#Flint+start) ⇒ <code>Promise.&lt;Boolean&gt;</code>\n    * [.restart()](#Flint+restart) ⇒ <code>Promise.&lt;Boolean&gt;</code>\n    * [.getMessage(messageId)](#Flint+getMessage) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\n    * [.getFiles(messageId)](#Flint+getFiles) ⇒ <code>Promise.&lt;Array&gt;</code>\n    * [.hears(phrase, action, [helpText], [preference])](#Flint+hears) ⇒ <code>String</code>\n    * [.clearHears(id)](#Flint+clearHears) ⇒ <code>null</code>\n    * [.showHelp([header], [footer])](#Flint+showHelp) ⇒ <code>String</code>\n    * [.setAuthorizer(Action)](#Flint+setAuthorizer) ⇒ <code>Boolean</code>\n    * [.clearAuthorizer()](#Flint+clearAuthorizer) ⇒ <code>null</code>\n    * [.use(path)](#Flint+use) ⇒ <code>Boolean</code>\n\n<a name=\"new_Flint_new\"></a>\n\n### new Flint(options)\nCreates an instance of Flint.\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Configuration object containing Flint settings. |\n\n**Example**  \n```js\nvar options = {\n  webhookUrl: 'http://myserver.com/flint',\n  token: 'Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u'\n};\nvar flint = new Flint(options);\n```\n<a name=\"Flint+options\"></a>\n\n### flint.options : <code>object</code>\nOptions Object\n\n**Kind**: instance namespace of <code>[Flint](#Flint)</code>  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| token | <code>string</code> |  | Spark Token. |\n| webhookUrl | <code>string</code> |  | URL that is used for SPark API to send callbacks. |\n| webhookSecret | <code>string</code> |  | If specified, inbound webhooks are authorized before being processed. |\n| messageFormat | <code>string</code> | <code>&quot;text&quot;</code> | Default Spark message format to use with bot.say(). |\n| maxPageItems | <code>number</code> | <code>50</code> | Max results that the paginator uses. |\n| maxConcurrent | <code>number</code> | <code>3</code> | Max concurrent sessions to the Spark API |\n| minTime | <code>number</code> | <code>600</code> | Min time between consecutive request starts. |\n| requeueMinTime | <code>number</code> | <code>minTime*10</code> | Min time between consecutive request starts of requests that have been re-queued. |\n| requeueMaxRetry | <code>number</code> | <code>3</code> | Msx number of atteempts to make for failed request. |\n| requeueCodes | <code>array</code> | <code>[429,500,503]</code> | Array of http result codes that should be retried. |\n| requestTimeout | <code>number</code> | <code>20000</code> | Timeout for an individual request recieving a response. |\n| queueSize | <code>number</code> | <code>10000</code> | Size of the buffer that holds outbound requests. |\n| requeueSize | <code>number</code> | <code>10000</code> | Size of the buffer that holds outbound re-queue requests. |\n| id | <code>string</code> | <code>&quot;random&quot;</code> | The id this instance of flint uses. |\n| webhookRequestJSONLocation | <code>string</code> | <code>&quot;body&quot;</code> | The property under the Request to find the JSON contents. |\n| removeWebhooksOnStart | <code>Boolean</code> | <code>true</code> | If you wish to have the bot remove all account webhooks when starting. |\n\n<a name=\"Flint+setSparkToken\"></a>\n\n### flint.setSparkToken(token) ⇒ <code>Promise.&lt;String&gt;</code>\nTests, and then sets a new Spark Token.\n\n**Kind**: instance method of <code>[Flint](#Flint)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| token | <code>String</code> | New Spark Token for Flint to use. |\n\n**Example**  \n```js\nflint.setSparkToken('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function(token) {\n     console.log('token updated to: ' + token);\n  });\n```\n<a name=\"Flint+stop\"></a>\n\n### flint.stop() ⇒ <code>Promise.&lt;Boolean&gt;</code>\nStop Flint.\n\n**Kind**: instance method of <code>[Flint](#Flint)</code>  \n**Example**  \n```js\nflint.stop();\n```\n<a name=\"Flint+start\"></a>\n\n### flint.start() ⇒ <code>Promise.&lt;Boolean&gt;</code>\nStart Flint.\n\n**Kind**: instance method of <code>[Flint](#Flint)</code>  \n**Example**  \n```js\nflint.start();\n```\n<a name=\"Flint+restart\"></a>\n\n### flint.restart() ⇒ <code>Promise.&lt;Boolean&gt;</code>\nRestart Flint.\n\n**Kind**: instance method of <code>[Flint](#Flint)</code>  \n**Example**  \n```js\nflint.restart();\n```\n<a name=\"Flint+getMessage\"></a>\n\n### flint.getMessage(messageId) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\nGet Message Object by ID\n\n**Kind**: instance method of <code>[Flint](#Flint)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| messageId | <code>String</code> | Message ID from Spark API. |\n\n<a name=\"Flint+getFiles\"></a>\n\n### flint.getFiles(messageId) ⇒ <code>Promise.&lt;Array&gt;</code>\nGet Files from Message Object by ID\n\n**Kind**: instance method of <code>[Flint](#Flint)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| messageId | <code>String</code> | Message ID from Spark API. |\n\n<a name=\"Flint+hears\"></a>\n\n### flint.hears(phrase, action, [helpText], [preference]) ⇒ <code>String</code>\nAdd action to be performed when bot hears a phrase.\n\n**Kind**: instance method of <code>[Flint](#Flint)</code>  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| phrase | <code>Regex</code> &#124; <code>String</code> |  | The phrase as either a regex or string. If regex, matches on entire message.If string, matches on first word. |\n| action | <code>function</code> |  | The function to execute when phrase is matched. Function is executed with 2 variables. Trigger and Bot. The Trigger Object contains information about the person who entered a message that matched the phrase. The Bot Object is an instance of the Bot Class as it relates to the room the message was heard. |\n| [helpText] | <code>String</code> |  | The string of text that describes how this command operates. |\n| [preference] | <code>Number</code> | <code>0</code> | Specifies preference of phrase action when overlapping phrases are matched. On multiple matches with same preference, all matched actions are excuted. On multiple matches with difference preference values, only the lower preferenced matched action(s) are executed. |\n\n**Example**  \n```js\n// using a string to match first word and defines help text\nflint.hears('/say', function(bot, trigger, id) {\n  bot.say(trigger.args.slice(1, trigger.arges.length - 1));\n}, '/say <greeting> - Responds with a greeting');\n```\n**Example**  \n```js\n// using regex to match across entire message\nflint.hears(/(^| )beer( |.|$)/i, function(bot, trigger, id) {\n  bot.say('Enjoy a beer, %s! 🍻', trigger.personDisplayName);\n});\n```\n<a name=\"Flint+clearHears\"></a>\n\n### flint.clearHears(id) ⇒ <code>null</code>\nRemove a \"flint.hears()\" entry.\n\n**Kind**: instance method of <code>[Flint](#Flint)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>String</code> | The \"hears\" ID. |\n\n**Example**  \n```js\n// using a string to match first word and defines help text\nvar hearsHello = flint.hears('/flint', function(bot, trigger, id) {\n  bot.say('Hello %s!', trigger.personDisplayName);\n});\nflint.clearHears(hearsHello);\n```\n<a name=\"Flint+showHelp\"></a>\n\n### flint.showHelp([header], [footer]) ⇒ <code>String</code>\nDisplay help for registered Flint Commands.\n\n**Kind**: instance method of <code>[Flint](#Flint)</code>  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [header] | <code>String</code> | <code>Usage:</code> | String to use in header before displaying help message. |\n| [footer] | <code>String</code> | <code>Powered by Flint - https://github.com/nmarus/flint</code> | String to use in footer before displaying help message. |\n\n**Example**  \n```js\nflint.hears('/help', function(bot, trigger, id) {\n  bot.say(flint.showHelp());\n});\n```\n<a name=\"Flint+setAuthorizer\"></a>\n\n### flint.setAuthorizer(Action) ⇒ <code>Boolean</code>\nAttaches authorizer function.\n\n**Kind**: instance method of <code>[Flint](#Flint)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| Action | <code>function</code> | The function to execute when phrase is matched to authenticate a user.  The function is passed the bot, trigger, and id and expects a return value of true or false. |\n\n**Example**  \n```js\nfunction myAuthorizer(bot, trigger, id) {\n  if(trigger.personEmail === 'john@test.com') {\n    return true;\n  }\n  else if(trigger.personDomain === 'test.com') {\n    return true;\n  }\n  else {\n    return false;\n  }\n}\nflint.setAuthorizer(myAuthorizer);\n```\n<a name=\"Flint+clearAuthorizer\"></a>\n\n### flint.clearAuthorizer() ⇒ <code>null</code>\nRemoves authorizer function.\n\n**Kind**: instance method of <code>[Flint](#Flint)</code>  \n**Example**  \n```js\nflint.clearAuthorizer();\n```\n<a name=\"Flint+use\"></a>\n\n### flint.use(path) ⇒ <code>Boolean</code>\nLoad a Plugin from a external file.\n\n**Kind**: instance method of <code>[Flint](#Flint)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| path | <code>String</code> | Load a plugin at given path. |\n\n**Example**  \n```js\nflint.use('events.js');\n```\n**Example**  \n```js\n// events.js\nmodule.exports = function(flint) {\n  flint.on('spawn', function(bot) {\n    console.log('new bot spawned in room: %s', bot.myroom.title);\n  });\n  flint.on('despawn', function(bot) {\n    console.log('bot despawned in room: %s', bot.myroom.title);\n  });\n  flint.on('messageCreated', function(message, bot) {\n    console.log('\"%s\" said \"%s\" in room \"%s\"', message.personEmail, message.text, bot.myroom.title);\n  });\n};\n```\n<a name=\"Bot\"></a>\n\n## Bot\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | Bot UUID |\n| active | <code>boolean</code> | Bot active state |\n| person | <code>object</code> | Bot Person Object |\n| email | <code>string</code> | Bot email |\n| team | <code>object</code> | Bot team object |\n| room | <code>object</code> | Bot room object |\n| membership | <code>object</code> | Bot membership object |\n| isLocked | <code>boolean</code> | If bot is locked |\n| isGroup | <code>boolean</code> | If bot is Group |\n| isDirect | <code>boolean</code> | If bot is 1:1/Direct |\n| isTeam | <code>boolean</code> | if bot is in Team |\n| lastActivity | <code>date</code> | Last bot activity |\n\n\n* [Bot](#Bot)\n    * [new Bot(flint)](#new_Bot_new)\n    * [.exit()](#Bot+exit) ⇒ <code>Promise.&lt;Boolean&gt;</code>\n    * [.add(email(s), [moderator])](#Bot+add) ⇒ <code>[Promise.&lt;Bot&gt;](#Bot)</code>\n    * [.remove(email(s))](#Bot+remove) ⇒ <code>[Promise.&lt;Bot&gt;](#Bot)</code>\n    * [.getModerators()](#Bot+getModerators) ⇒ <code>Promise.&lt;Array&gt;</code>\n    * [.newRoom(name, emails)](#Bot+newRoom) ⇒ <code>[Promise.&lt;Bot&gt;](#Bot)</code>\n    * [.newTeamRoom(name, emails)](#Bot+newTeamRoom) ⇒ <code>[Promise.&lt;Bot&gt;](#Bot)</code>\n    * [.moderateRoom()](#Bot+moderateRoom) ⇒ <code>[Promise.&lt;Bot&gt;](#Bot)</code>\n    * [.unmoderateRoom()](#Bot+unmoderateRoom) ⇒ <code>[Promise.&lt;Bot&gt;](#Bot)</code>\n    * [.moderatorSet(email(s))](#Bot+moderatorSet) ⇒ <code>[Promise.&lt;Bot&gt;](#Bot)</code>\n    * [.moderatorClear(email(s))](#Bot+moderatorClear) ⇒ <code>[Promise.&lt;Bot&gt;](#Bot)</code>\n    * [.implode()](#Bot+implode) ⇒ <code>Promise.&lt;Boolean&gt;</code>\n    * [.say([format], message)](#Bot+say) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\n    * [.dm(email, [format], message)](#Bot+dm) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\n    * [.uploadStream(filename, stream)](#Bot+uploadStream) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\n    * [.upload(filepath)](#Bot+upload) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\n    * [.censor(messageId)](#Bot+censor) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\n    * [.roomRename(title)](#Bot+roomRename) ⇒ <code>Promise.&lt;Room&gt;</code>\n    * [.getMessages(count)](#Bot+getMessages) ⇒ <code>Promise.&lt;Array&gt;</code>\n    * [.store(key, value)](#Bot+store) ⇒ <code>String</code> &#124; <code>Number</code> &#124; <code>Boolean</code> &#124; <code>Array</code> &#124; <code>Object</code> &#124; <code>function</code>\n    * [.recall(key)](#Bot+recall) ⇒ <code>String</code> &#124; <code>Number</code> &#124; <code>Boolean</code> &#124; <code>Array</code> &#124; <code>Object</code> &#124; <code>function</code>\n    * [.forget([key])](#Bot+forget) ⇒ <code>Boolean</code>\n\n<a name=\"new_Bot_new\"></a>\n\n### new Bot(flint)\nCreates a Bot instance that is then attached to a Spark Room.\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| flint | <code>Object</code> | The flint object this Bot spawns under. |\n\n<a name=\"Bot+exit\"></a>\n\n### bot.exit() ⇒ <code>Promise.&lt;Boolean&gt;</code>\nInstructs Bot to exit from room.\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n**Example**  \n```js\nbot.exit();\n```\n<a name=\"Bot+add\"></a>\n\n### bot.add(email(s), [moderator]) ⇒ <code>[Promise.&lt;Bot&gt;](#Bot)</code>\nInstructs Bot to add person(s) to room.\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| email(s) | <code>String</code> &#124; <code>Array</code> | Email Address (or Array of Email Addresses) of Person(s) to add to room. |\n| [moderator] | <code>Boolean</code> | Add as moderator. |\n\n**Example**  \n```js\n// add one person to room by email\nbot.add('john@test.com');\n```\n**Example**  \n```js\n// add one person as moderator to room by email\nbot.add('john@test.com', true)\n  .catch(function(err) {\n    // log error if unsuccessful\n    console.log(err.message);\n  });\n```\n**Example**  \n```js\n// add 3 people to room by email\nbot.add(['john@test.com', 'jane@test.com', 'bill@test.com']);\n```\n<a name=\"Bot+remove\"></a>\n\n### bot.remove(email(s)) ⇒ <code>[Promise.&lt;Bot&gt;](#Bot)</code>\nInstructs Bot to remove person from room.\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| email(s) | <code>String</code> &#124; <code>Array</code> | Email Address (or Array of Email Addresses) of Person(s) to remove from room. |\n\n**Example**  \n```js\n// remove one person to room by email\nbot.remove('john@test.com');\n```\n**Example**  \n```js\n// remove 3 people from room by email\nbot.remove(['john@test.com', 'jane@test.com', 'bill@test.com']);\n```\n<a name=\"Bot+getModerators\"></a>\n\n### bot.getModerators() ⇒ <code>Promise.&lt;Array&gt;</code>\nGet room moderators.\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n**Example**  \n```js\nbot.getModerators()\n  .then(function(moderators) {\n    console.log(moderators);\n  });\n```\n<a name=\"Bot+newRoom\"></a>\n\n### bot.newRoom(name, emails) ⇒ <code>[Promise.&lt;Bot&gt;](#Bot)</code>\nCreate new room with people by email\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| name | <code>String</code> | Name of room. |\n| emails | <code>Array</code> | Emails of people to add to room. |\n\n<a name=\"Bot+newTeamRoom\"></a>\n\n### bot.newTeamRoom(name, emails) ⇒ <code>[Promise.&lt;Bot&gt;](#Bot)</code>\nCreate new Team Room\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| name | <code>String</code> | Name of room. |\n| emails | <code>Array</code> | Emails of people to add to room. |\n\n<a name=\"Bot+moderateRoom\"></a>\n\n### bot.moderateRoom() ⇒ <code>[Promise.&lt;Bot&gt;](#Bot)</code>\nEnable Room Moderation.Enable.\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n**Example**  \n```js\nbot.moderateRoom()\n  .then(function(err) {\n    console.log(err.message)\n  });\n```\n<a name=\"Bot+unmoderateRoom\"></a>\n\n### bot.unmoderateRoom() ⇒ <code>[Promise.&lt;Bot&gt;](#Bot)</code>\nDisable Room Moderation.\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n**Example**  \n```js\nbot.unmoderateRoom()\n  .then(function(err) {\n    console.log(err.message)\n  });\n```\n<a name=\"Bot+moderatorSet\"></a>\n\n### bot.moderatorSet(email(s)) ⇒ <code>[Promise.&lt;Bot&gt;](#Bot)</code>\nAssign Moderator in Room\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| email(s) | <code>String</code> &#124; <code>Array</code> | Email Address (or Array of Email Addresses) of Person(s) to assign as moderator. |\n\n**Example**  \n```js\nbot.moderatorSet('john@test.com')\n  .then(function(err) {\n    console.log(err.message)\n  });\n```\n<a name=\"Bot+moderatorClear\"></a>\n\n### bot.moderatorClear(email(s)) ⇒ <code>[Promise.&lt;Bot&gt;](#Bot)</code>\nUnassign Moderator in Room\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| email(s) | <code>String</code> &#124; <code>Array</code> | Email Address (or Array of Email Addresses) of Person(s) to unassign as moderator. |\n\n**Example**  \n```js\nbot.moderatorClear('john@test.com')\n  .then(function(err) {\n    console.log(err.message)\n  });\n```\n<a name=\"Bot+implode\"></a>\n\n### bot.implode() ⇒ <code>Promise.&lt;Boolean&gt;</code>\nRemove a room and all memberships.\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n**Example**  \n```js\nflint.hears('/implode', function(bot, trigger) {\n  bot.implode();\n});\n```\n<a name=\"Bot+say\"></a>\n\n### bot.say([format], message) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\nSend text with optional file to room.\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [format] | <code>String</code> | <code>text</code> | Set message format. Valid options are 'text' or 'markdown'. |\n| message | <code>String</code> &#124; <code>Object</code> |  | Message to send to room. This can be a simple string, or a object for advanced use. |\n\n**Example**  \n```js\n// Simple example\nflint.hears('/hello', function(bot, trigger) {\n  bot.say('hello');\n});\n```\n**Example**  \n```js\n// Simple example to send message and file\nflint.hears('/file', function(bot, trigger) {\n  bot.say({text: 'Here is your file!', file: 'http://myurl/file.doc'});\n});\n```\n**Example**  \n```js\n// Markdown Method 1 - Define markdown as default\nflint.messageFormat = 'markdown';\nflint.hears('/hello', function(bot, trigger) {\n  bot.say('**hello**, How are you today?');\n});\n```\n**Example**  \n```js\n// Mardown Method 2 - Define message format as part of argument string\nflint.hears('/hello', function(bot, trigger) {\n  bot.say('markdown', '**hello**, How are you today?');\n});\n```\n**Example**  \n```js\n// Mardown Method 3 - Use an object (use this method of bot.say() when needing to send a file in the same message as markdown text.\nflint.hears('/hello', function(bot, trigger) {\n  bot.say({markdown: '*Hello <@personEmail:' + trigger.personEmail + '|' + trigger.personDisplayName + '>*'});\n});\n```\n<a name=\"Bot+dm\"></a>\n\n### bot.dm(email, [format], message) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\nSend text with optional file in a direct message. This sends a message to a 1:1 room with the user (creates 1:1, if one does not already exist)\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| email | <code>String</code> |  | Email of person to send Direct Message. |\n| [format] | <code>String</code> | <code>text</code> | Set message format. Valid options are 'text' or 'markdown'. |\n| message | <code>String</code> &#124; <code>Object</code> |  | Message to send to room. This can be a simple string, or a object for advanced use. |\n\n**Example**  \n```js\n// Simple example\nflint.hears('/dm', function(bot, trigger) {\n  bot.dm('someone@domain.com', 'hello');\n});\n```\n**Example**  \n```js\n// Simple example to send message and file\nflint.hears('/dm', function(bot, trigger) {\n  bot.dm('someone@domain.com', {text: 'Here is your file!', file: 'http://myurl/file.doc'});\n});\n```\n**Example**  \n```js\n// Markdown Method 1 - Define markdown as default\nflint.messageFormat = 'markdown';\nflint.hears('/dm', function(bot, trigger) {\n  bot.dm('someone@domain.com', '**hello**, How are you today?');\n});\n```\n**Example**  \n```js\n// Mardown Method 2 - Define message format as part of argument string\nflint.hears('/dm', function(bot, trigger) {\n  bot.dm('markdown', 'someone@domain.com', '**hello**, How are you today?');\n});\n```\n**Example**  \n```js\n// Mardown Method 3 - Use an object (use this method of bot.dm() when needing to send a file in the same message as markdown text.\nflint.hears('/dm', function(bot, trigger) {\n  bot.dm('someone@domain.com', {markdown: '*Hello <@personEmail:' + trigger.personEmail + '|' + trigger.personDisplayName + '>*'});\n});\n```\n<a name=\"Bot+uploadStream\"></a>\n\n### bot.uploadStream(filename, stream) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\nUpload a file to a room using a Readable Stream\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| filename | <code>String</code> | File name used when uploading to room |\n| stream | <code>Stream.Readable</code> | Stream Readable |\n\n**Example**  \n```js\nflint.hears('/file', function(bot, trigger) {\n\n  // define filename used when uploading to room\n  var filename = 'test.png';\n\n  // create readable stream\n  var stream = fs.createReadStream('/my/file/test.png');\n\n  bot.uploadStream(filename, stream);\n});\n```\n<a name=\"Bot+upload\"></a>\n\n### bot.upload(filepath) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\nUpload a file to room.\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| filepath | <code>String</code> | File Path to upload |\n\n**Example**  \n```js\nflint.hears('/file', function(bot, trigger) {\n  bot.upload('test.png');\n});\n```\n<a name=\"Bot+censor\"></a>\n\n### bot.censor(messageId) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\nRemove Message By Id.\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n\n| Param | Type |\n| --- | --- |\n| messageId | <code>String</code> | \n\n<a name=\"Bot+roomRename\"></a>\n\n### bot.roomRename(title) ⇒ <code>Promise.&lt;Room&gt;</code>\nSet Title of Room.\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n\n| Param | Type |\n| --- | --- |\n| title | <code>String</code> | \n\n**Example**  \n```js\nbot.roomRename('My Renamed Room')\n  .then(function(err) {\n    console.log(err.message)\n  });\n```\n<a name=\"Bot+getMessages\"></a>\n\n### bot.getMessages(count) ⇒ <code>Promise.&lt;Array&gt;</code>\nGet messages from room. Returned data has newest message at bottom.\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n\n| Param | Type |\n| --- | --- |\n| count | <code>Integer</code> | \n\n**Example**  \n```js\nbot.getMessages(5).then(function(messages) {\n  messages.forEach(function(message) {\n    // display message text\n    if(message.text) {\n      console.log(message.text);\n    }\n  });\n});\n```\n<a name=\"Bot+store\"></a>\n\n### bot.store(key, value) ⇒ <code>String</code> &#124; <code>Number</code> &#124; <code>Boolean</code> &#124; <code>Array</code> &#124; <code>Object</code> &#124; <code>function</code>\nStore key/value data in this bot instance\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n\n| Param | Type |\n| --- | --- |\n| key | <code>String</code> | \n| value | <code>String</code> &#124; <code>Number</code> &#124; <code>Boolean</code> &#124; <code>Array</code> &#124; <code>Object</code> &#124; <code>function</code> | \n\n**Example**  \n```js\nvar myAppSettings = bot.store('myAppSettings', {});\nmyAppSettings.myParam = 'true';\n```\n<a name=\"Bot+recall\"></a>\n\n### bot.recall(key) ⇒ <code>String</code> &#124; <code>Number</code> &#124; <code>Boolean</code> &#124; <code>Array</code> &#124; <code>Object</code> &#124; <code>function</code>\nRecall value of data stored by 'key' in this bot instance\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n\n| Param | Type |\n| --- | --- |\n| key | <code>String</code> | \n\n**Example**  \n```js\nvar myAppSettings = bot.recall('myAppSettings');\nif(myAppSettings && myAppSettings.myParam) {\n  // do stuff\n}\n```\n<a name=\"Bot+forget\"></a>\n\n### bot.forget([key]) ⇒ <code>Boolean</code>\nForget a key or entire store.\n\n**Kind**: instance method of <code>[Bot](#Bot)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [key] | <code>String</code> | Optional key value to forget. If key is not passed, bot forgets everything. |\n\n<a name=\"Message\"></a>\n\n## Message : <code>object</code>\nMessage Object\n\n**Kind**: global namespace  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | Message ID |\n| personId | <code>string</code> | Person ID |\n| personEmail | <code>string</code> | Person Email |\n| personAvatar | <code>string</code> | PersonAvatar URL |\n| personDomain | <code>string</code> | Person Domain Name |\n| personDisplayName | <code>string</code> | Person Display Name |\n| roomId | <code>string</code> | Room ID |\n| text | <code>string</code> | Message text |\n| files | <code>array</code> | Array of File objects |\n| created | <code>date</code> | Date Message created |\n\n<a name=\"File\"></a>\n\n## File : <code>object</code>\nFile Object\n\n**Kind**: global namespace  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | Spark API Content ID |\n| name | <code>string</code> | File name |\n| ext | <code>string</code> | File extension |\n| type | <code>string</code> | Header [content-type] for file |\n| binary | <code>buffer</code> | File contents as binary |\n| base64 | <code>string</code> | File contents as base64 encoded string |\n| personId | <code>string</code> | Person ID of who added file |\n| personEmail | <code>string</code> | Person Email of who added file |\n| personAvatar | <code>string</code> | PersonAvatar URL |\n| personDomain | <code>string</code> | Person Domain Name |\n| personDisplayName | <code>string</code> | Person Display Name |\n| created | <code>date</code> | Date file was added to room |\n\n<a name=\"Trigger\"></a>\n\n## Trigger : <code>object</code>\nTrigger Object\n\n**Kind**: global namespace  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | Message ID |\n| phrase | <code>string</code> &#124; <code>regex</code> | Matched lexicon phrase |\n| text | <code>string</code> | Message Text (or false if no text) |\n| html | <code>string</code> | Message HTML (or false if no html) |\n| markdown | <code>string</code> | Message Markdown (or false if no markdown) |\n| mentionedPeople | <code>array</code> | Mentioned People (or false if no mentioned) |\n| files | <code>array</code> | Message Files (or false if no files in trigger) |\n| args | <code>array</code> | Filtered array of words in message text. |\n| created | <code>date</code> | Message Created date |\n| roomId | <code>string</code> | Room ID |\n| roomTitle | <code>string</code> | Room Title |\n| roomType | <code>string</code> | Room Type (group or direct) |\n| roomIsLocked | <code>boolean</code> | Room Locked/Moderated status |\n| personId | <code>string</code> | Person ID |\n| personEmail | <code>string</code> | Person Email |\n| personDisplayName | <code>string</code> | Person Display Name |\n| personUsername | <code>string</code> | Person Username |\n| personDomain | <code>string</code> | Person Domain name |\n| personAvatar | <code>string</code> | Person Avatar URL |\n| personMembership | <code>object</code> | Person Membership object for person |\n\n<a name=\"event_log\"></a>\n\n## \"log\"\nFlint log event.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| message | <code>string</code> | Log Message |\n\n<a name=\"event_stop\"></a>\n\n## \"stop\"\nFlint stop event.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | Flint UUID |\n\n<a name=\"event_start\"></a>\n\n## \"start\"\nFlint start event.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | Flint UUID |\n\n<a name=\"event_initialized\"></a>\n\n## \"initialized\"\nFlint initialized event.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | Flint UUID |\n\n<a name=\"event_roomLocked\"></a>\n\n## \"roomLocked\"\nRoom Locked event.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| bot | <code>object</code> | Bot Object |\n| id | <code>string</code> | Flint UUID |\n\n<a name=\"event_roomUnocked\"></a>\n\n## \"roomUnocked\"\nRoom Unocked event.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| bot | <code>object</code> | Bot Object |\n| id | <code>string</code> | Flint UUID |\n\n<a name=\"event_personEnters\"></a>\n\n## \"personEnters\"\nPerson Enter Room event.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| bot | <code>object</code> | Bot Object |\n| person | <code>object</code> | Person Object |\n| id | <code>string</code> | Flint UUID |\n\n<a name=\"event_botAddedAsModerator\"></a>\n\n## \"botAddedAsModerator\"\nBot Added as Room Moderator.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| bot | <code>object</code> | Bot Object |\n| id | <code>string</code> | Flint UUID |\n\n<a name=\"event_botRemovedAsModerator\"></a>\n\n## \"botRemovedAsModerator\"\nBot Removed as Room Moderator.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| bot | <code>object</code> | Bot Object |\n| id | <code>string</code> | Flint UUID |\n\n<a name=\"event_personAddedAsModerator\"></a>\n\n## \"personAddedAsModerator\"\nPerson Added as Moderator.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| bot | <code>object</code> | Bot Object |\n| person | <code>object</code> | Person Object |\n| id | <code>string</code> | Flint UUID |\n\n<a name=\"event_personRemovedAsModerator\"></a>\n\n## \"personRemovedAsModerator\"\nPerson Removed as Moderator.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| bot | <code>object</code> | Bot Object |\n| person | <code>object</code> | Person Object |\n| id | <code>string</code> | Flint UUID |\n\n<a name=\"event_personExits\"></a>\n\n## \"personExits\"\nPerson Exits Room.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| bot | <code>object</code> | Bot Object |\n| person | <code>object</code> | Person Object |\n| id | <code>string</code> | Flint UUID |\n\n<a name=\"event_mentioned\"></a>\n\n## \"mentioned\"\nBot Mentioned.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| bot | <code>object</code> | Bot Object |\n| trigger | <code>object</code> | Trigger Object |\n| id | <code>string</code> | Flint UUID |\n\n<a name=\"event_message\"></a>\n\n## \"message\"\nMessage Recieved.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| bot | <code>object</code> | Bot Object |\n| trigger | <code>object</code> | Trigger Object |\n| id | <code>string</code> | Flint UUID |\n\n<a name=\"event_files\"></a>\n\n## \"files\"\nFile Recieved.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| bot | <code>object</code> | Bot Object |\n| trigger | <code>trigger</code> | Trigger Object |\n| id | <code>string</code> | Flint UUID |\n\n<a name=\"event_spawn\"></a>\n\n## \"spawn\"\nBot Spawned.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| bot | <code>object</code> | Bot Object |\n| id | <code>string</code> | Flint UUID |\n\n<a name=\"event_despawn\"></a>\n\n## \"despawn\"\nBot Despawned.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| bot | <code>object</code> | Bot Object |\n| id | <code>string</code> | Flint UUID |\n\n## License\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
  "readmeFilename": "README.md",
  "_id": "node-flint@4.1.1",
  "dist": {
    "shasum": "d795b582af83a7898bb06c27965b9bcb156642ad"
  },
  "_from": "node-flint@",
  "_resolved": "https://registry.npmjs.org/node-flint/-/node-flint-4.1.1.tgz"
}
