{
  "name": "node-sparky",
  "version": "3.1.17",
  "description": "Spark SDK for NodeJS",
  "main": "index.js",
  "scripts": {
    "test": "node_modules/.bin/mocha ./test/test-spark.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nmarus/sparky.git"
  },
  "keywords": [
    "cisco",
    "cisco spark",
    "spark",
    "spark api",
    "spark team",
    "spark teams",
    "spark bot",
    "spark machine accounts",
    "flint"
  ],
  "author": {
    "name": "Nicholas Marus",
    "email": "nmarus@gmail.com"
  },
  "license": "LGPL-3.0",
  "bugs": {
    "url": "https://github.com/nmarus/sparky/issues"
  },
  "homepage": "https://github.com/nmarus/sparky#readme",
  "dependencies": {
    "bottleneck": "1.12.0",
    "debug": "2.2.0",
    "lodash": "4.13.1",
    "mime-types": "^2.1.11",
    "request": "2.74.0",
    "uuid": "^2.0.2",
    "when": "3.7.7"
  },
  "devDependencies": {
    "jsdoc-to-markdown": "^1.3.6"
  },
  "readme": "# node-sparky\n\n[![NPM](https://nodei.co/npm/node-sparky.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/node-sparky/)\n\n#### Cisco Spark SDK for Node JS (Version 3)\n\n```js\nvar Spark = require('node-sparky');\n\nvar spark = new Spark({ token: '<my token>' });\n\nspark.roomsGet(10)\n  .then(function(rooms) {\n    // process rooms as array\n    rooms.forEach(function(room) {\n      console.log(room.title);\n    });\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n\n***If you are coming from using node-sparky version 2.x or earlier, note that\nthe architecture, commands, and some variable names have changed. While this\nrelease is similar to previous versions, there are some major differences.\nPlease read the API docs below before migrating your code to this release.\nIf you are looking for the old release version, node-sparky@2.0.27 is still\navailable to be installed through NPM.***\n\n## Features\n\n* Built in rate limiter and outbound queue that allows control over the number\nof parallel API calls and the minimum time between each call.\n* Transparently handles 429 (and/or other customizable) http errors and re-queues those requests.\n* File processor for retrieving attachments from room.\n* Event emitters tied to request, response, error, retry, and queue drops.\n* Returns promises that comply with [A+ standards.](https://promisesaplus.com/).\n* Handles pagination transparently. (Receive unlimited records)\n* **(new)** Support for Spark API Advanced Webhooks\n* **(new)** Support Teams API\n* **(new)** Support for markdown formatted messages\n* **(new)** Support for [authenticated HMAC-SHA1 webhooks](https://developer.ciscospark.com/webhooks-explained.html#sensitive-data)\n\n\n## Installation\n\nThis module can be installed via NPM:\n```bash\nnpm install node-sparky --save\n```\n\n\n# Reference\n\n## Initialization and Configuration\n\n```js\nvar Spark = require('node-sparky');\n\nvar spark = new Spark({\n  token: 'mytoken',\n  webhookUrl: 'http://mywebhook.url/path',\n});\n```\n## Classes\n\n<dl>\n<dt><a href=\"#Spark\">Spark</a></dt>\n<dd></dd>\n</dl>\n\n## Objects\n\n<dl>\n<dt><a href=\"#Room\">Room</a> : <code>object</code></dt>\n<dd><p>Room Object</p>\n</dd>\n<dt><a href=\"#Person\">Person</a> : <code>object</code></dt>\n<dd><p>Person Object</p>\n</dd>\n<dt><a href=\"#Message\">Message</a> : <code>object</code></dt>\n<dd><p>Message Object</p>\n</dd>\n<dt><a href=\"#File\">File</a> : <code>object</code></dt>\n<dd><p>File Object</p>\n</dd>\n<dt><a href=\"#Team\">Team</a> : <code>object</code></dt>\n<dd><p>Team Object</p>\n</dd>\n<dt><a href=\"#TeamMembership\">TeamMembership</a> : <code>object</code></dt>\n<dd><p>Team Membership Object</p>\n</dd>\n<dt><a href=\"#Membership\">Membership</a> : <code>object</code></dt>\n<dd><p>Membership Object</p>\n</dd>\n<dt><a href=\"#Webhook\">Webhook</a> : <code>object</code></dt>\n<dd><p>Webhook Object</p>\n</dd>\n<dt><a href=\"#Validator\">Validator</a> : <code>object</code></dt>\n<dd><p>Spark Validation functions.</p>\n</dd>\n</dl>\n\n## Events\n\n<dl>\n<dt><a href=\"#event_drop\">\"drop\"</a></dt>\n<dd><p>Spark Queue Drop Event.</p>\n</dd>\n<dt><a href=\"#event_request\">\"request\"</a></dt>\n<dd><p>Spark request event.</p>\n</dd>\n<dt><a href=\"#event_reponse\">\"reponse\"</a></dt>\n<dd><p>Spark response event.</p>\n</dd>\n<dt><a href=\"#event_retry\">\"retry\"</a></dt>\n<dd><p>Spark retry event.</p>\n</dd>\n</dl>\n\n<a name=\"Spark\"></a>\n\n## Spark\n**Kind**: global class  \n**Throw**: <code>Error</code> Throws on spark token missing in options object.  \n\n* [Spark](#Spark)\n    * [new Spark(options)](#new_Spark_new)\n    * [.options](#Spark+options) : <code>object</code>\n    * [.roomsGet([max])](#Spark+roomsGet) ⇒ <code>Promise.&lt;Array&gt;</code>\n    * [.roomsDirect([max])](#Spark+roomsDirect) ⇒ <code>Promise.&lt;Array&gt;</code>\n    * [.roomsGroup([max])](#Spark+roomsGroup) ⇒ <code>Promise.&lt;Array&gt;</code>\n    * [.roomsByTeam(teamId, [max])](#Spark+roomsByTeam) ⇒ <code>Promise.&lt;Array&gt;</code>\n    * [.roomGet(roomId)](#Spark+roomGet) ⇒ <code>[Promise.&lt;Room&gt;](#Room)</code>\n    * [.roomAdd(title)](#Spark+roomAdd) ⇒ <code>[Promise.&lt;Room&gt;](#Room)</code>\n    * [.roomRename(roomId, title)](#Spark+roomRename) ⇒ <code>[Promise.&lt;Room&gt;](#Room)</code>\n    * [.roomRemove(roomId)](#Spark+roomRemove) ⇒ <code>Promise</code>\n    * [.peopleSearch(displayName, [max])](#Spark+peopleSearch) ⇒ <code>Promise.&lt;Array&gt;</code>\n    * [.personGet(personId)](#Spark+personGet) ⇒ <code>[Promise.&lt;Person&gt;](#Person)</code>\n    * [.personMe()](#Spark+personMe) ⇒ <code>[Promise.&lt;Person&gt;](#Person)</code>\n    * [.personByEmail(email)](#Spark+personByEmail) ⇒ <code>[Promise.&lt;Person&gt;](#Person)</code>\n    * [.messagesGet(roomId, [max])](#Spark+messagesGet) ⇒ <code>Promise.&lt;Array&gt;</code>\n    * [.messageGet(messageId)](#Spark+messageGet) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\n    * [.messageSendPerson(email, message)](#Spark+messageSendPerson) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\n    * [.messageSendRoom(roomId, message)](#Spark+messageSendRoom) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\n    * [.messageStreamRoom(roomId, message)](#Spark+messageStreamRoom) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\n    * [.upload(roomId, filepath)](#Spark+upload) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\n    * [.messageRemove(messageId)](#Spark+messageRemove) ⇒ <code>Promise</code>\n    * [.contentGet(id)](#Spark+contentGet) ⇒ <code>[Promise.&lt;File&gt;](#File)</code>\n    * [.contentByUrl(url)](#Spark+contentByUrl) ⇒ <code>[Promise.&lt;File&gt;](#File)</code>\n    * [.teamsGet([max])](#Spark+teamsGet) ⇒ <code>Promise.&lt;Array&gt;</code>\n    * [.teamGet(teamId)](#Spark+teamGet) ⇒ <code>[Promise.&lt;Team&gt;](#Team)</code>\n    * [.teamAdd(name)](#Spark+teamAdd) ⇒ <code>[Promise.&lt;Team&gt;](#Team)</code>\n    * [.teamRoomAdd(teamId, title)](#Spark+teamRoomAdd) ⇒ <code>[Promise.&lt;Room&gt;](#Room)</code>\n    * [.teamRename(teamId, name)](#Spark+teamRename) ⇒ <code>[Promise.&lt;Team&gt;](#Team)</code>\n    * [.teamRemove(teamId)](#Spark+teamRemove) ⇒ <code>Promise</code>\n    * [.teamMembershipsGet(teamId, [max])](#Spark+teamMembershipsGet) ⇒ <code>Promise.&lt;Array&gt;</code>\n    * [.teamMembershipGet(membershipId)](#Spark+teamMembershipGet) ⇒ <code>[Promise.&lt;TeamMembership&gt;](#TeamMembership)</code>\n    * [.teamMembershipAdd(teamId, email, moderator)](#Spark+teamMembershipAdd) ⇒ <code>[Promise.&lt;TeamMembership&gt;](#TeamMembership)</code>\n    * [.teamMembershipSetModerator(membershipId)](#Spark+teamMembershipSetModerator) ⇒ <code>[Promise.&lt;TeamMembership&gt;](#TeamMembership)</code>\n    * [.teamMembershipClearModerator(membershipId)](#Spark+teamMembershipClearModerator) ⇒ <code>[Promise.&lt;TeamMembership&gt;](#TeamMembership)</code>\n    * [.teamMembershipRemove(membershipId)](#Spark+teamMembershipRemove) ⇒ <code>Promise</code>\n    * [.membershipsGet([max])](#Spark+membershipsGet) ⇒ <code>Promise.&lt;Array&gt;</code>\n    * [.membershipsByRoom(roomId, [max])](#Spark+membershipsByRoom) ⇒ <code>Promise.&lt;Array&gt;</code>\n    * [.membershipGet(membershipId)](#Spark+membershipGet) ⇒ <code>[Promise.&lt;Membership&gt;](#Membership)</code>\n    * [.membershipByRoomByEmail(roomId, personEmail)](#Spark+membershipByRoomByEmail) ⇒ <code>[Promise.&lt;Membership&gt;](#Membership)</code>\n    * [.membershipAdd(roomId, email, moderator)](#Spark+membershipAdd) ⇒ <code>[Promise.&lt;Membership&gt;](#Membership)</code>\n    * [.membershipSetModerator(membershipId)](#Spark+membershipSetModerator) ⇒ <code>[Promise.&lt;Membership&gt;](#Membership)</code>\n    * [.membershipClearModerator(membershipId)](#Spark+membershipClearModerator) ⇒ <code>[Promise.&lt;Membership&gt;](#Membership)</code>\n    * [.membershipRemove(membershipId)](#Spark+membershipRemove) ⇒ <code>Promise</code>\n    * [.webhooksGet([max])](#Spark+webhooksGet) ⇒ <code>Promise.&lt;Array&gt;</code>\n    * [.webhookGet(webhookId)](#Spark+webhookGet) ⇒ <code>[Promise.&lt;Webhook&gt;](#Webhook)</code>\n    * [.webhookAdd(resource, event, name, [filter])](#Spark+webhookAdd) ⇒ <code>[Promise.&lt;Webhook&gt;](#Webhook)</code>\n    * [.webhookRemove(webhookId)](#Spark+webhookRemove) ⇒ <code>Promise</code>\n    * [.webhookAuth(signature, payload)](#Spark+webhookAuth) ⇒ <code>Boolen</code>\n\n<a name=\"new_Spark_new\"></a>\n\n### new Spark(options)\nCreates a Spark API instance that is then attached to a Spark Account.\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| options | <code>Object</code> | Configuration object containing Spark settings |\n\n<a name=\"Spark+options\"></a>\n\n### spark.options : <code>object</code>\nOptions Object\n\n**Kind**: instance namespace of <code>[Spark](#Spark)</code>  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| token | <code>string</code> |  | Spark Token. |\n| webhookUrl | <code>string</code> |  | URL that is used for SPark API to send callbacks. |\n| webhookSecret | <code>string</code> |  | If specified, creates webhooks using this secret. The incoming webhook must still be authenticated. See Spark.webhookAuth(). |\n| maxPageItems | <code>number</code> | <code>50</code> | Max results that the paginator uses. |\n| maxConcurrent | <code>number</code> | <code>3</code> | Max concurrent sessions to the Spark API |\n| minTime | <code>number</code> | <code>600</code> | Min time between consecutive request starts. |\n| requeueMinTime | <code>number</code> | <code>minTime*10</code> | Min time between consecutive request starts of requests that have been re-queued. |\n| requeueMaxRetry | <code>number</code> | <code>3</code> | Msx number of atteempts to make for failed request. |\n| requeueCodes | <code>array</code> | <code>[429,500,503]</code> | Array of http result codes that should be retried. |\n| requestTimeout | <code>number</code> | <code>20000</code> | Timeout for an individual request recieving a response. |\n| queueSize | <code>number</code> | <code>10000</code> | Size of the buffer that holds outbound requests. |\n| requeueSize | <code>number</code> | <code>10000</code> | Size of the buffer that holds outbound re-queue requests. |\n\n<a name=\"Spark+roomsGet\"></a>\n\n### spark.roomsGet([max]) ⇒ <code>Promise.&lt;Array&gt;</code>\nReturn all Spark Rooms registered to account.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [max] | <code>Integer</code> | Number of records to return |\n\n**Example**  \n```js\nspark.roomsGet(10)\n  .then(function(rooms) {\n    // process rooms as array\n    rooms.forEach(function(room) {\n      console.log(room.title);\n    });\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+roomsDirect\"></a>\n\n### spark.roomsDirect([max]) ⇒ <code>Promise.&lt;Array&gt;</code>\nReturn all Spark 1:1 Rooms.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [max] | <code>Integer</code> | Number of records to return |\n\n**Example**  \n```js\nspark.roomsDirect(10)\n  .then(function(rooms) {\n    // process rooms as array\n    rooms.forEach(function(room) {\n      console.log(room.title);\n    });\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+roomsGroup\"></a>\n\n### spark.roomsGroup([max]) ⇒ <code>Promise.&lt;Array&gt;</code>\nReturn all Spark Group Rooms.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [max] | <code>Integer</code> | Number of records to return |\n\n**Example**  \n```js\nspark.roomsGroup(10)\n  .then(function(rooms) {\n    // process rooms as array\n    rooms.forEach(function(room) {\n      console.log(room.title);\n    });\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+roomsByTeam\"></a>\n\n### spark.roomsByTeam(teamId, [max]) ⇒ <code>Promise.&lt;Array&gt;</code>\nReturn all Spark Rooms for a particular Team ID.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| teamId | <code>String</code> | The Spark Team ID |\n| [max] | <code>Integer</code> | Number of records to return |\n\n**Example**  \n```js\nspark.roomsByTeam('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u', 10)\n  .then(function(rooms) {\n    // process rooms as array\n    rooms.forEach(function(room) {\n      console.log(room.title);\n    });\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+roomGet\"></a>\n\n### spark.roomGet(roomId) ⇒ <code>[Promise.&lt;Room&gt;](#Room)</code>\nReturn details of Spark Room by ID.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| roomId | <code>String</code> | Spark Room ID |\n\n**Example**  \n```js\nspark.roomGet('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function(room) {\n    console.log(room.title);\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+roomAdd\"></a>\n\n### spark.roomAdd(title) ⇒ <code>[Promise.&lt;Room&gt;](#Room)</code>\nAdd new Spark Room.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| title | <code>String</code> | Title for new Room |\n\n**Example**  \n```js\nspark.roomAdd('myroom')\n  .then(function(room) {\n    console.log(room.title);\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+roomRename\"></a>\n\n### spark.roomRename(roomId, title) ⇒ <code>[Promise.&lt;Room&gt;](#Room)</code>\nRename Spark Room.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| roomId | <code>String</code> | Spark Room ID |\n| title | <code>String</code> | Title for new Room |\n\n**Example**  \n```js\nspark.roomRename('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u', 'myroom2')\n  .then(function(room) {\n    console.log(room.title);\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+roomRemove\"></a>\n\n### spark.roomRemove(roomId) ⇒ <code>Promise</code>\nRemove Spark Room by ID.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| roomId | <code>String</code> | Spark Room ID |\n\n**Example**  \n```js\nspark.roomRemove('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function() {\n    console.log('Room removed.');\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+peopleSearch\"></a>\n\n### spark.peopleSearch(displayName, [max]) ⇒ <code>Promise.&lt;Array&gt;</code>\nSearch Spark for People by display name.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| displayName | <code>String</code> | Search String to find as display name |\n| [max] | <code>Integer</code> | Number of records to return |\n\n**Example**  \n```js\nspark.peopleSearch('John', 10)\n  .then(function(people) {\n    // process people as array\n    people.forEach(function(person) {\n      console.log(person.displayName);\n    });\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+personGet\"></a>\n\n### spark.personGet(personId) ⇒ <code>[Promise.&lt;Person&gt;](#Person)</code>\nReturn details of Spark User by ID.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| personId | <code>String</code> | Spark Person ID |\n\n**Example**  \n```js\nspark.personGet('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function(person) {\n    console.log(person.displayName);\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+personMe\"></a>\n\n### spark.personMe() ⇒ <code>[Promise.&lt;Person&gt;](#Person)</code>\nReturn details of Spark User that has authenticated.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n**Example**  \n```js\nspark.personMe()\n  .then(function(person) {\n    console.log(person.displayName);\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+personByEmail\"></a>\n\n### spark.personByEmail(email) ⇒ <code>[Promise.&lt;Person&gt;](#Person)</code>\nReturn details of Spark User by Email.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| email | <code>String</code> | Email address of Spark User |\n\n**Example**  \n```js\nspark.personByEmail('aperson@company.com')\n  .then(function(person) {\n    console.log(person.displayName);\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+messagesGet\"></a>\n\n### spark.messagesGet(roomId, [max]) ⇒ <code>Promise.&lt;Array&gt;</code>\nReturn messages in a Spark Room.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| roomId | <code>String</code> | Spark Room ID |\n| [max] | <code>Integer</code> | Number of records to return |\n\n**Example**  \n```js\nspark.messagesGet('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u', 100)\n  .then(function(messages) {\n    // process messages as array\n    messages.forEach(function(message) {\n      console.log(message.text);\n    });\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+messageGet\"></a>\n\n### spark.messageGet(messageId) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\nReturn details of Spark Message by ID.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| messageId | <code>String</code> | Spark Message ID |\n\n**Example**  \n```js\nspark.messageGet('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u', 100)\n  .then(function(message) {\n    console.log(message.text);\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+messageSendPerson\"></a>\n\n### spark.messageSendPerson(email, message) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\nSends 1:1 Spark message to a person.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| email | <code>String</code> | Email address of Spark User |\n| message | <code>Object</code> | Message Object |\n\n**Example**  \n```js\nspark.messageSendPerson('aperson@company.com', {\n    text: 'Hello!',\n    files: ['http://company.com/myfile.doc']\n  })\n  .then(function(message) {\n    console.log('Message sent: %s', message.txt) ;\n  })\n  .catch(function(err){\n    console.log(err);\n  });\n```\n<a name=\"Spark+messageSendRoom\"></a>\n\n### spark.messageSendRoom(roomId, message) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\nSends Spark message to a room.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| roomId | <code>String</code> | Spark Room ID |\n| message | <code>Object</code> | Message Object |\n\n**Example**  \n```js\nspark.messageSendRoom('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u', {\n    text: 'Hello!',\n    files: ['http://company.com/myfile.doc']\n  })\n  .then(function(message) {\n    console.log('Message sent: %s', message.txt);\n  })\n  .catch(function(err){\n    console.log(err);\n  });\n```\n<a name=\"Spark+messageStreamRoom\"></a>\n\n### spark.messageStreamRoom(roomId, message) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\nStreams Spark message to a room.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| roomId | <code>String</code> | Spark Room ID |\n| message | <code>Object</code> | Message Object |\n\n**Example**  \n```js\nvar roomId = 'Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u';\nvar text = 'Hello';\nvar filename = 'test.png';\nvar stream = fs.createReadStream(filename);\nvar message = { 'text': text, 'filename': filename, 'stream': stream };\nspark.messageStreamRoom(roomId, message)\n  .then(function(message) {\n    console.log('Message sent: %s', message.txt);\n  })\n  .catch(function(err){\n    console.log(err);\n  });\n```\n<a name=\"Spark+upload\"></a>\n\n### spark.upload(roomId, filepath) ⇒ <code>[Promise.&lt;Message&gt;](#Message)</code>\nUpload a file by path to Spark Room\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| roomId | <code>String</code> | Spark Room ID |\n| filepath | <code>String</code> | path to file |\n\n**Example**  \n```js\nvar roomId = 'Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u';\nspark.upload(roomId, '/some/local/file.png');\n```\n<a name=\"Spark+messageRemove\"></a>\n\n### spark.messageRemove(messageId) ⇒ <code>Promise</code>\nRemove Spark Message by ID.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| messageId | <code>String</code> | Spark Message ID |\n\n**Example**  \n```js\nspark.messageRemove('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function() {\n    console.log('Message removed.');\n  })\n  .catch(function(err){\n    console.log(err);\n  });\n```\n<a name=\"Spark+contentGet\"></a>\n\n### spark.contentGet(id) ⇒ <code>[Promise.&lt;File&gt;](#File)</code>\nReturn details of Spark File by Content ID.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>String</code> | Spark Content ID |\n\n**Example**  \n```js\nspark.contentGet('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function(file) {\n    console.log('File name: %s', file.name);\n  })\n  .catch(function(err){\n    console.log(err);\n  });\n```\n<a name=\"Spark+contentByUrl\"></a>\n\n### spark.contentByUrl(url) ⇒ <code>[Promise.&lt;File&gt;](#File)</code>\nReturn details of Spark File by Spark Content URL.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| url | <code>String</code> | Spark Content URL |\n\n**Example**  \n```js\nspark.contentByUrl('http://api.ciscospark.com/v1/contents/Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function(file) {\n    console.log('File name: %s', file.name);\n  })\n  .catch(function(err){\n    console.log(err);\n  });\n```\n<a name=\"Spark+teamsGet\"></a>\n\n### spark.teamsGet([max]) ⇒ <code>Promise.&lt;Array&gt;</code>\nReturn all Spark Teams registered to account.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [max] | <code>Integer</code> | Number of records to return |\n\n**Example**  \n```js\nspark.teamsGet(10)\n  .then(function(teams) {\n    // process teams as array\n    teams.forEach(function(team) {\n      console.log(team.name);\n    });\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+teamGet\"></a>\n\n### spark.teamGet(teamId) ⇒ <code>[Promise.&lt;Team&gt;](#Team)</code>\nReturn details of Spark Team by ID.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| teamId | <code>String</code> | Spark Team ID |\n\n**Example**  \n```js\nspark.teamGet('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function(team) {\n    console.log(team.name);\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+teamAdd\"></a>\n\n### spark.teamAdd(name) ⇒ <code>[Promise.&lt;Team&gt;](#Team)</code>\nAdd new Spark Team.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| name | <code>String</code> | Name for new Team |\n\n**Example**  \n```js\nspark.teamAdd('myteam')\n  .then(function(team) {\n    console.log(team.name);\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+teamRoomAdd\"></a>\n\n### spark.teamRoomAdd(teamId, title) ⇒ <code>[Promise.&lt;Room&gt;](#Room)</code>\nAdd new Spark Team Room.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| teamId | <code>String</code> | Spark Team ID |\n| title | <code>String</code> | Title for new Room |\n\n**Example**  \n```js\nspark.teamRoomAdd('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u', 'myroom')\n  .then(function(room) {\n    console.log(room.title);\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+teamRename\"></a>\n\n### spark.teamRename(teamId, name) ⇒ <code>[Promise.&lt;Team&gt;](#Team)</code>\nRename a Spark Team.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| teamId | <code>String</code> | Spark Team ID |\n| name | <code>String</code> | Name for new Team |\n\n**Example**  \n```js\nspark.teamRename('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u', 'myteam2')\n  .then(function(team) {\n    console.log(team.name);\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+teamRemove\"></a>\n\n### spark.teamRemove(teamId) ⇒ <code>Promise</code>\nRemove Spark Team by ID.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| teamId | <code>String</code> | Spark Team ID |\n\n**Example**  \n```js\nspark.teamRemove('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function() {\n    console.log('Team removed.');\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+teamMembershipsGet\"></a>\n\n### spark.teamMembershipsGet(teamId, [max]) ⇒ <code>Promise.&lt;Array&gt;</code>\nReturn all Spark Team Memberships for a specific Team.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| teamId | <code>String</code> | Spark Team ID |\n| [max] | <code>Integer</code> | Number of records to return |\n\n**Example**  \n```js\nspark.teamMembershipsGet('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u', 100)\n  .then(function(memberships) {\n    // process memberships as array\n    memberships.forEach(function(membership) {\n      console.log(membership.personEmail);\n    });\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+teamMembershipGet\"></a>\n\n### spark.teamMembershipGet(membershipId) ⇒ <code>[Promise.&lt;TeamMembership&gt;](#TeamMembership)</code>\nReturn Spark Team Membership by ID.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| membershipId | <code>String</code> | Spark Membership ID |\n\n**Example**  \n```js\nspark.membershipGet('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function(membership) {\n    console.log(membership.personEmail);\n  })\n  .catch(function(err){\n    console.log(err);\n  });\n```\n<a name=\"Spark+teamMembershipAdd\"></a>\n\n### spark.teamMembershipAdd(teamId, email, moderator) ⇒ <code>[Promise.&lt;TeamMembership&gt;](#TeamMembership)</code>\nAdd new Spark Team Membership.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| teamId | <code>String</code> | Spark Team ID |\n| email | <code>String</code> | Email address of person to add |\n| moderator | <code>Boolean</code> | Boolean value to add as moderator |\n\n**Example**  \n```js\nspark.teamMembershipAdd('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u', 'aperson@company.com')\n  .then(function(membership) {\n    console.log(membership.id);\n  })\n  .catch(function(err){\n    console.log(err);\n  });\n```\n<a name=\"Spark+teamMembershipSetModerator\"></a>\n\n### spark.teamMembershipSetModerator(membershipId) ⇒ <code>[Promise.&lt;TeamMembership&gt;](#TeamMembership)</code>\nSet a Team Membership as moderator.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| membershipId | <code>String</code> | Spark Membership ID |\n\n**Example**  \n```js\nspark.teamMembershipSetModerator('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function(membership) {\n    console.log('%s is a moderator: %s', membership.personEmail, membership.isModerator);\n  })\n  .catch(function(err){\n    console.log(err);\n  });\n```\n<a name=\"Spark+teamMembershipClearModerator\"></a>\n\n### spark.teamMembershipClearModerator(membershipId) ⇒ <code>[Promise.&lt;TeamMembership&gt;](#TeamMembership)</code>\nRemove a Team Membership as moderator.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| membershipId | <code>String</code> | Spark Membership ID |\n\n**Example**  \n```js\nspark.teamMembershipClearModerator('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function(membership) {\n    console.log('%s is a moderator: %s', membership.personEmail, membership.isModerator);\n  })\n  .catch(function(err){\n    console.log(err);\n  });\n```\n<a name=\"Spark+teamMembershipRemove\"></a>\n\n### spark.teamMembershipRemove(membershipId) ⇒ <code>Promise</code>\nRemove Spark Team Membership by ID..\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| membershipId | <code>String</code> | Spark Membership ID |\n\n**Example**  \n```js\nspark.teamMembershipRemove('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function() {\n    console.log('Membership removed');\n  })\n  .catch(function(err){\n    console.log(err);\n  });\n```\n<a name=\"Spark+membershipsGet\"></a>\n\n### spark.membershipsGet([max]) ⇒ <code>Promise.&lt;Array&gt;</code>\nReturn all Spark Memberships registered to account..\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [max] | <code>Integer</code> | Number of records to return |\n\n**Example**  \n```js\nspark.membershipsGet(100)\n  .then(function(memberships) {\n    // process memberships as array\n    memberships.forEach(function(membership) {\n      console.log(membership.personEmail);\n    });\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+membershipsByRoom\"></a>\n\n### spark.membershipsByRoom(roomId, [max]) ⇒ <code>Promise.&lt;Array&gt;</code>\nReturn all Spark Memberships in a Spark Room..\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| roomId | <code>String</code> | Spark Room ID |\n| [max] | <code>Integer</code> | Number of records to return |\n\n**Example**  \n```js\nspark.membershipsByRoom('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u', 100)\n  .then(function(memberships) {\n    // process memberships as array\n    memberships.forEach(function(membership) {\n      console.log(membership.personEmail);\n    });\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+membershipGet\"></a>\n\n### spark.membershipGet(membershipId) ⇒ <code>[Promise.&lt;Membership&gt;](#Membership)</code>\nReturn Spark Membership by ID..\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| membershipId | <code>String</code> | Spark Membership ID |\n\n**Example**  \n```js\nspark.membershipGet('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function(membership) {\n    console.log(membership.personEmail);\n  })\n  .catch(function(err){\n    console.log(err);\n  });\n```\n<a name=\"Spark+membershipByRoomByEmail\"></a>\n\n### spark.membershipByRoomByEmail(roomId, personEmail) ⇒ <code>[Promise.&lt;Membership&gt;](#Membership)</code>\nReturn Spark Membership by Room and Email..\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| roomId | <code>String</code> | Spark Membership ID |\n| personEmail | <code>String</code> | Email of Person |\n\n**Example**  \n```js\nspark.membershipByRoomByEmail('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u', 'aperson@company.com')\n  .then(function(membership) {\n    console.log(membership.id);\n  })\n  .catch(function(err){\n    console.log(err);\n  });\n```\n<a name=\"Spark+membershipAdd\"></a>\n\n### spark.membershipAdd(roomId, email, moderator) ⇒ <code>[Promise.&lt;Membership&gt;](#Membership)</code>\nAdd new Spark Membership..\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| roomId | <code>String</code> | Spark Room ID |\n| email | <code>String</code> | Email address of person to add |\n| moderator | <code>Boolean</code> | Boolean value to add as moderator |\n\n**Example**  \n```js\nspark.membershipAdd('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u', 'aperson@company.com')\n  .then(function(membership) {\n    console.log(membership.id);\n  })\n  .catch(function(err){\n    console.log(err);\n  });\n```\n<a name=\"Spark+membershipSetModerator\"></a>\n\n### spark.membershipSetModerator(membershipId) ⇒ <code>[Promise.&lt;Membership&gt;](#Membership)</code>\nSet a Membership as moderator.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| membershipId | <code>String</code> | Spark Membership ID |\n\n**Example**  \n```js\nspark.membershipSetModerator('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function(membership) {\n    console.log('%s is a moderator: %s', membership.personEmail, membership.isModerator);\n  })\n  .catch(function(err){\n    console.log(err);\n  });\n```\n<a name=\"Spark+membershipClearModerator\"></a>\n\n### spark.membershipClearModerator(membershipId) ⇒ <code>[Promise.&lt;Membership&gt;](#Membership)</code>\nRemove a Membership as moderator.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| membershipId | <code>String</code> | Spark Membership ID |\n\n**Example**  \n```js\nspark.membershipClearModerator('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function(membership) {\n    console.log('%s is a moderator: %s', membership.personEmail, membership.isModerator);\n  })\n  .catch(function(err){\n    console.log(err);\n  });\n```\n<a name=\"Spark+membershipRemove\"></a>\n\n### spark.membershipRemove(membershipId) ⇒ <code>Promise</code>\nRemove Spark Membership by ID.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| membershipId | <code>String</code> | Spark Membership ID |\n\n**Example**  \n```js\nspark.membershipRemove('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function() {\n    console.log('Membership removed');\n  })\n  .catch(function(err){\n    console.log(err);\n  });\n```\n<a name=\"Spark+webhooksGet\"></a>\n\n### spark.webhooksGet([max]) ⇒ <code>Promise.&lt;Array&gt;</code>\nReturn all Spark Webhooks registered to account.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [max] | <code>Integer</code> | Number of records to return |\n\n**Example**  \n```js\nspark.webhooksGet(100)\n  .then(function(webhooks) {\n    // process webhooks as array\n    webhooks.forEach(function(webhook) {\n      console.log(webhook.name);\n    });\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+webhookGet\"></a>\n\n### spark.webhookGet(webhookId) ⇒ <code>[Promise.&lt;Webhook&gt;](#Webhook)</code>\nReturn details of Spark Webhook by ID.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| webhookId | <code>String</code> | Spark Webhook ID |\n\n**Example**  \n```js\nspark.webhookGet('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function(webhook) {\n    console.log(webhook.name);\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+webhookAdd\"></a>\n\n### spark.webhookAdd(resource, event, name, [filter]) ⇒ <code>[Promise.&lt;Webhook&gt;](#Webhook)</code>\nAdd new Spark Webhook.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| resource | <code>String</code> | Resource for webhook |\n| event | <code>String</code> | Event for webhook |\n| name | <code>String</code> | Name assigned to webhook to add |\n| [filter] | <code>String</code> | filter |\n\n**Example**  \n```js\nspark.webhookAdd('messages', 'created', 'mywebhook', 'Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function(webhook) {\n    console.log(webhook.name);\n  })\n  .catch(function(err) {\n    // process error\n    console.log(err);\n  });\n```\n<a name=\"Spark+webhookRemove\"></a>\n\n### spark.webhookRemove(webhookId) ⇒ <code>Promise</code>\nRemove Spark Webhook by ID.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| webhookId | <code>String</code> | Spark Webhook ID. |\n\n**Example**  \n```js\nspark.webhookRemove('Tm90aGluZyB0byBzZWUgaGVyZS4uLiBNb3ZlIGFsb25nLi4u')\n  .then(function() {\n    console.log('Webhook removed');\n  })\n  .catch(function(err){\n    console.log(err);\n  });\n```\n<a name=\"Spark+webhookAuth\"></a>\n\n### spark.webhookAuth(signature, payload) ⇒ <code>Boolen</code>\nAuthenticate X-Spark-Signature HMAC-SHA1 Hash.\n\n**Kind**: instance method of <code>[Spark](#Spark)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| signature | <code>String</code> | Value of \"X-Spark-Signature\" from header |\n| payload | <code>String</code> &#124; <code>Object</code> | This can either be the json object or a string representation of the webhook's body json payload |\n\n**Example**  \n```js\nvar sig = req.headers['x-spark-signature'];\nif(spark.webhookAuth(sig, req.body)) {\n  // webhook is valid\n} else {\n  // webhook is invalid\n}\n```\n<a name=\"Room\"></a>\n\n## Room : <code>object</code>\nRoom Object\n\n**Kind**: global namespace  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | Room ID |\n| title | <code>string</code> | Room Title |\n| type | <code>string</code> | Room Type |\n| isLocked | <code>boolean</code> | Room Moderated/Locked |\n| teamId | <code>string</code> | Team ID |\n| lastActivity | <code>date</code> | Last Activity in Room |\n| created | <code>date</code> | Room Created |\n\n<a name=\"Person\"></a>\n\n## Person : <code>object</code>\nPerson Object\n\n**Kind**: global namespace  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | Person ID |\n| emails | <code>array</code> | Emails |\n| displayName | <code>string</code> | Display Name |\n| avatar | <code>string</code> | Avatar URL |\n| created | <code>date</code> | Date created |\n| email | <code>string</code> | Email |\n| username | <code>string</code> | Username |\n| domain | <code>string</code> | Domain name |\n\n<a name=\"Message\"></a>\n\n## Message : <code>object</code>\nMessage Object\n\n**Kind**: global namespace  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | Message ID |\n| personId | <code>string</code> | Person ID |\n| personEmail | <code>string</code> | Person Email |\n| roomId | <code>string</code> | Room ID |\n| text | <code>string</code> | Message text |\n| files | <code>array</code> | Array of File objects |\n| created | <code>date</code> | Date Message created |\n\n<a name=\"File\"></a>\n\n## File : <code>object</code>\nFile Object\n\n**Kind**: global namespace  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | Spark API Content ID |\n| name | <code>string</code> | File name |\n| ext | <code>string</code> | File extension |\n| type | <code>string</code> | Header [content-type] for file |\n| binary | <code>buffer</code> | File contents as binary |\n| base64 | <code>string</code> | File contents as base64 encoded string |\n\n<a name=\"Team\"></a>\n\n## Team : <code>object</code>\nTeam Object\n\n**Kind**: global namespace  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | Message ID |\n| name | <code>string</code> | Team name |\n| created | <code>date</code> | Date Team created |\n\n<a name=\"TeamMembership\"></a>\n\n## TeamMembership : <code>object</code>\nTeam Membership Object\n\n**Kind**: global namespace  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | Membership ID |\n| teamId | <code>string</code> | Team ID |\n| personId | <code>string</code> | Person ID |\n| personEmail | <code>string</code> | Person Email |\n| isModerator | <code>boolean</code> | Membership is a moderator |\n| created | <code>date</code> | Date Membership created |\n\n<a name=\"Membership\"></a>\n\n## Membership : <code>object</code>\nMembership Object\n\n**Kind**: global namespace  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | Membership ID |\n| personId | <code>string</code> | Person ID |\n| personEmail | <code>string</code> | Person Email |\n| isModerator | <code>boolean</code> | Membership is a moderator |\n| isMonitor | <code>boolean</code> | Membership is a monitor |\n| created | <code>date</code> | Date Membership created |\n\n<a name=\"Webhook\"></a>\n\n## Webhook : <code>object</code>\nWebhook Object\n\n**Kind**: global namespace  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | Webhook ID |\n| name | <code>string</code> | Webhook name |\n| targetUrl | <code>string</code> | Webhook target URL |\n| resource | <code>boolean</code> | Webhook resource |\n| event | <code>boolean</code> | Webhook event |\n| filter | <code>boolean</code> | Webhook filter |\n| created | <code>date</code> | Date Webhook created |\n\n<a name=\"Validator\"></a>\n\n## Validator : <code>object</code>\nSpark Validation functions.\n\n**Kind**: global namespace  \n\n* [Validator](#Validator) : <code>object</code>\n    * [.isEmail(email)](#Validator.isEmail) ⇒ <code>Boolean</code>\n    * [.isUrl(url)](#Validator.isUrl) ⇒ <code>Boolean</code>\n    * [.isRoom(object)](#Validator.isRoom) ⇒ <code>Boolean</code>\n    * [.isPerson(object)](#Validator.isPerson) ⇒ <code>Boolean</code>\n    * [.isMessage(object)](#Validator.isMessage) ⇒ <code>Boolean</code>\n    * [.isMembership(object)](#Validator.isMembership) ⇒ <code>Boolean</code>\n    * [.isWebhook(object)](#Validator.isWebhook) ⇒ <code>Boolean</code>\n    * [.isTeam(object)](#Validator.isTeam) ⇒ <code>Boolean</code>\n    * [.isRooms(rooms)](#Validator.isRooms) ⇒ <code>Boolean</code>\n    * [.isPeople(persons)](#Validator.isPeople) ⇒ <code>Boolean</code>\n    * [.isMessages(messages)](#Validator.isMessages) ⇒ <code>Boolean</code>\n    * [.isMemberships(memberships)](#Validator.isMemberships) ⇒ <code>Boolean</code>\n    * [.isWebhooks(webhooks)](#Validator.isWebhooks) ⇒ <code>Boolean</code>\n    * [.isTeams(teams)](#Validator.isTeams) ⇒ <code>Boolean</code>\n\n<a name=\"Validator.isEmail\"></a>\n\n### Validator.isEmail(email) ⇒ <code>Boolean</code>\nValidate String is Email.\n\n**Kind**: static method of <code>[Validator](#Validator)</code>  \n**Returns**: <code>Boolean</code> - Returns results of validation..  \n\n| Param | Type |\n| --- | --- |\n| email | <code>String</code> | \n\n<a name=\"Validator.isUrl\"></a>\n\n### Validator.isUrl(url) ⇒ <code>Boolean</code>\nValidate String is URL.\n\n**Kind**: static method of <code>[Validator](#Validator)</code>  \n**Returns**: <code>Boolean</code> - Returns results of validation..  \n\n| Param | Type |\n| --- | --- |\n| url | <code>String</code> | \n\n<a name=\"Validator.isRoom\"></a>\n\n### Validator.isRoom(object) ⇒ <code>Boolean</code>\nValidate Spark Room Object.\n\n**Kind**: static method of <code>[Validator](#Validator)</code>  \n**Returns**: <code>Boolean</code> - True/false result of validation.  \n\n| Param | Type |\n| --- | --- |\n| object | <code>[Room](#Room)</code> | \n\n<a name=\"Validator.isPerson\"></a>\n\n### Validator.isPerson(object) ⇒ <code>Boolean</code>\nValidate Spark Person Object.\n\n**Kind**: static method of <code>[Validator](#Validator)</code>  \n**Returns**: <code>Boolean</code> - True/false result of validation.  \n\n| Param | Type |\n| --- | --- |\n| object | <code>[Room](#Room)</code> | \n\n<a name=\"Validator.isMessage\"></a>\n\n### Validator.isMessage(object) ⇒ <code>Boolean</code>\nValidate Spark Message Object.\n\n**Kind**: static method of <code>[Validator](#Validator)</code>  \n**Returns**: <code>Boolean</code> - True/false result of validation.  \n\n| Param | Type |\n| --- | --- |\n| object | <code>[Message](#Message)</code> | \n\n<a name=\"Validator.isMembership\"></a>\n\n### Validator.isMembership(object) ⇒ <code>Boolean</code>\nValidate Spark Membership Object.\n\n**Kind**: static method of <code>[Validator](#Validator)</code>  \n**Returns**: <code>Boolean</code> - True/false result of validation.  \n\n| Param | Type |\n| --- | --- |\n| object | <code>[Membership](#Membership)</code> | \n\n<a name=\"Validator.isWebhook\"></a>\n\n### Validator.isWebhook(object) ⇒ <code>Boolean</code>\nValidate Spark Webhook Object.\n\n**Kind**: static method of <code>[Validator](#Validator)</code>  \n**Returns**: <code>Boolean</code> - True/false result of validation.  \n\n| Param | Type |\n| --- | --- |\n| object | <code>[Webhook](#Webhook)</code> | \n\n<a name=\"Validator.isTeam\"></a>\n\n### Validator.isTeam(object) ⇒ <code>Boolean</code>\nValidate Spark Team Object.\n\n**Kind**: static method of <code>[Validator](#Validator)</code>  \n**Returns**: <code>Boolean</code> - True/false result of validation.  \n\n| Param | Type |\n| --- | --- |\n| object | <code>[Team](#Team)</code> | \n\n<a name=\"Validator.isRooms\"></a>\n\n### Validator.isRooms(rooms) ⇒ <code>Boolean</code>\nValidate Spark Room Objects in Array.\n\n**Kind**: static method of <code>[Validator](#Validator)</code>  \n**Returns**: <code>Boolean</code> - True/false result of validation.  \n\n| Param | Type |\n| --- | --- |\n| rooms | <code>Array</code> | \n\n<a name=\"Validator.isPeople\"></a>\n\n### Validator.isPeople(persons) ⇒ <code>Boolean</code>\nValidate Spark Person Objects in Array.\n\n**Kind**: static method of <code>[Validator](#Validator)</code>  \n**Returns**: <code>Boolean</code> - True/false result of validation.  \n\n| Param | Type |\n| --- | --- |\n| persons | <code>Array</code> | \n\n<a name=\"Validator.isMessages\"></a>\n\n### Validator.isMessages(messages) ⇒ <code>Boolean</code>\nValidate Spark Message Objects in Array.\n\n**Kind**: static method of <code>[Validator](#Validator)</code>  \n**Returns**: <code>Boolean</code> - True/false result of validation.  \n\n| Param | Type |\n| --- | --- |\n| messages | <code>Array</code> | \n\n<a name=\"Validator.isMemberships\"></a>\n\n### Validator.isMemberships(memberships) ⇒ <code>Boolean</code>\nValidate Spark Membership Objects in Array.\n\n**Kind**: static method of <code>[Validator](#Validator)</code>  \n**Returns**: <code>Boolean</code> - True/false result of validation.  \n\n| Param | Type |\n| --- | --- |\n| memberships | <code>Array</code> | \n\n<a name=\"Validator.isWebhooks\"></a>\n\n### Validator.isWebhooks(webhooks) ⇒ <code>Boolean</code>\nValidate Spark Webhook Objects in Array.\n\n**Kind**: static method of <code>[Validator](#Validator)</code>  \n**Returns**: <code>Boolean</code> - True/false result of validation.  \n\n| Param | Type |\n| --- | --- |\n| webhooks | <code>Array</code> | \n\n<a name=\"Validator.isTeams\"></a>\n\n### Validator.isTeams(teams) ⇒ <code>Boolean</code>\nValidate Spark Team Objects in Array.\n\n**Kind**: static method of <code>[Validator](#Validator)</code>  \n**Returns**: <code>Boolean</code> - True/false result of validation.  \n\n| Param | Type |\n| --- | --- |\n| teams | <code>Array</code> | \n\n<a name=\"event_drop\"></a>\n\n## \"drop\"\nSpark Queue Drop Event.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| request | <code>options</code> | API Request |\n| id | <code>string</code> | Spark UUID |\n\n<a name=\"event_request\"></a>\n\n## \"request\"\nSpark request event.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| request | <code>options</code> | API Request |\n| id | <code>string</code> | Spark UUID |\n\n<a name=\"event_reponse\"></a>\n\n## \"reponse\"\nSpark response event.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| response | <code>options</code> | Response |\n| id | <code>string</code> | Spark UUID |\n\n<a name=\"event_retry\"></a>\n\n## \"retry\"\nSpark retry event.\n\n**Kind**: event emitted  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| request | <code>options</code> | API Request |\n| id | <code>string</code> | Spark UUID |\n\n## License\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.",
  "readmeFilename": "README.md",
  "_id": "node-sparky@3.1.17",
  "dist": {
    "shasum": "23d02b2ffc5825568ed288311511e4de02eb31ca"
  },
  "_from": "node-sparky@^3.1.17",
  "_resolved": "https://registry.npmjs.org/node-sparky/-/node-sparky-3.1.17.tgz"
}
